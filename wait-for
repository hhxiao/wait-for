#!/bin/sh

TIMEOUT=15
QUIET=0
HOSTS=();

echoerr() {
  if [ "$QUIET" -ne 1 ]; then printf "%s\n" "$*" 1>&2; fi
}

usage() {
  exitcode="$1"
  cat << USAGE >&2
Usage:
  $cmdname host:port [-t timeout] [-- command args]
  -q | --quiet                        Do not output any status messages
  -t TIMEOUT | --timeout=timeout      Timeout in seconds, zero for no timeout
  -- COMMAND ARGS                     Execute command with args after the test finishes
USAGE
  exit "$exitcode"
}

wait_for() {
  command="$*"

  for ((i=0; i<${#HOSTS[*]}; i++));
  do
    timeout=(${TIMEOUT})
    hostport=(${HOSTS[i]//:/ })
    HOST=${hostport[0]}
    PORT=${hostport[1]}

    while [ true ]
    do
      nc -z "$HOST" "$PORT" > /dev/null 2>&1
      result=$?
      if [ $result -eq 0 ] ; then
        break
      fi
      sleep 1
      timeout=$(($timeout-1))
      if [ $timeout == 0 ] ; then
        if [ $QUIET -eq 0 ] ; then
          echo "timed out for ${HOST}:${PORT} ..." >&2
        fi
        exit 1
      fi
    done
  done
  if [ -n "$command" ] ; then
    sleep 1
    exec $command
  fi
  exit 0
}

while [ $# -gt 0 ]
do
  case "$1" in
    *:* )
    HOSTS=("${HOSTS[@]}" "$1")
    shift 1
    ;;
    -q | --quiet)
    QUIET=1
    shift 1
    ;;
    -t)
    TIMEOUT="$2"
    if [ "$TIMEOUT" = "" ]; then break; fi
    shift 2
    ;;
    --timeout=*)
    TIMEOUT="${1#*=}"
    shift 1
    ;;
    --)
    shift
    break
    ;;
    --help)
    usage 0
    ;;
    *)
    echoerr "Unknown argument: $1"
    usage 1
    ;;
  esac
done

if [ "${#HOSTS[@]}" -eq 0 ]; then
  echoerr "Error: you need to provide a host and port to test."
  usage 2
fi

wait_for "$@"
